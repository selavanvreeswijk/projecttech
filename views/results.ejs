<!DOCTYPE html>
<html lang="en ">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Results</title>
    <link rel="stylesheet" href="/style.css">
   

    <%- include('partials/header') %>   

    <style>
        h1{

             margin-bottom: 1em;
            }


        #plantList{
            display: flex;
            flex-direction: column;
            align-items: center;

            margin-bottom: 1em;
            text-align: center;

        }
    </style>
</head>

<body>
    <main id="plantList">

        <h1>Results</h1>

        <%- include ('partials/container') %>

            <ul class="grid-view list" id="list-view-plants">

                <% plants.forEach(plant => { %>
                   <li>

                    <span class="plant-names">
                        <%- include('partials/cards', { plant: plant }) %>
                    </span>
                     
                   </li>
               <% }) %> 
   
           </ul>

      
    </main>

    <footer>
        <%- include('partials/footer') %> 
    </footer>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/list.js/2.3.1/list.min.js"></script>

    <script>



        //zoekfunctie
        let options = {
            valueNames: ['plant-names']
        }
        let plantList = new List('plantList', options);

        // Sorteerknoppen activeren
        document.getElementById('A-Z').addEventListener('change', function () {
            plantList.sort('plant-names', { order: "asc" });
        });

        document.getElementById('Z-A').addEventListener('change', function () {
            plantList.sort('plant-names', { order: "desc" });
        });

        
            

         //planten filteren op basis van de zoekterm
         function filterPlants(searchTerm) {
            const filteredPlants = plantsData.filter(plant =>{
                const commonName = plant['Common name']; 

                //controleer of CommonName een string is voordat toLowerCase wordt aangeroepen
                if (typeof commonName === 'string'){
                    return commonName.toLowerCase().includes(searchTerm.toLowerCase());
                } else {
                    //als commonName geen string is, retourneer false
                    return false;
                }     
            }); 

        if (filteredPlants.length > 0) {
                renderPlantList(filteredPlants);
        } else {
                renderEmptyState();
            }
        }

        function renderEmptyState() { // kijken hoe dit op een andere manier kan!
            const listElement = document.querySelector('#list-view-plants');
            listElement.innerHTML = '<p>No plants founds</p>'
        }

            //toLowerCase() maakt de functie hoofletterongevoelig
            //includes() checkt of de plantnaam de zoekterm bevat
            // renderPlantList(filteredPlants); //update de lijst met gefilterde planten
       



        const sortButton = document.getElementById('sort-btn');
        const sortOptions = document.getElementById('sort-options');
        const filterButton = document.getElementById('filter-btn');
        const filterOptions = document.getElementById('filter-options');

        const sortPaths = sortButton.querySelectorAll('svg path');
        const filterIcon = filterButton.querySelector('svg path');


        // Toggle voor sorteren
        sortButton.addEventListener('click', function (event) {
            event.stopPropagation();
            sortOptions.classList.toggle('hidden');
            sortButton.classList.toggle('active');
            sortPaths.forEach(path => path.classList.toggle('active')); 

            filterOptions.classList.add('hidden');
            filterButton.classList.remove('active');
            filterIcon.classList.remove('active');
        });

        // Toggle voor filteren
        filterButton.addEventListener('click', function (event) {
            event.stopPropagation();
            filterOptions.classList.toggle('hidden');
            filterButton.classList.toggle('active');
            filterIcon.classList.toggle('active'); 

            sortOptions.classList.add('hidden');
            sortButton.classList.remove('active');
            sortPaths.forEach(path => path.classList.remove('active'));
        });

        // Klik buiten een dropdown om deze te sluiten
        document.addEventListener('click', function (event) {
            if (!sortButton.contains(event.target) && !sortOptions.contains(event.target)) {
                sortOptions.classList.add('hidden');
                sortButton.classList.remove('active');
                sortPaths.forEach(path => path.classList.remove('active'));
            }
            if (!filterButton.contains(event.target) && !filterOptions.contains(event.target)) {
                filterOptions.classList.add('hidden');
                filterButton.classList.remove('active');
                filterIcon.classList.remove('active');
            }
        });

        document.querySelectorAll('.favorite-btn').forEach(button => {
            button.addEventListener('click', function (event){
                event.preventDefault(); // Voorkom dat de `<a>` link wordt gevolgd
                this.querySelector('.cls-2').classList.toggle('clicked');
            });
        });

    </script>

</body>
</html>