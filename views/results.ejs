<!DOCTYPE html>
<html lang="en ">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Results</title>
    <link rel="stylesheet" href="/style.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/list.js/2.3.1/list.min.js"></script>

    <%- include('partials/header') %>   

</head>

<body>
    <main>

        <h1 class="h1-small">Results</h1>

        <%- include ('partials/container') %>


        <ul class="list-view" id="list-view-plants">

             <% plants.forEach(plant => { %>
                <li class= "plant-names">
                    <%- include('partials/cards', { plant: plant }) %>
                </li>
            <% }) %> 

        </ul>
      
    </main>

    <footer>
        <%- include('partials/footer') %> 
    </footer>

    <script>

        //variabele voor de planten
        let plantsData = [];

        // api gegevens ophalen en toevoegen aan lijst
        async function fetchPlants() {
            try {
                const response = await fetch('/api/plants');  //vraagt data op via server
                const plants = await response.json();

                //slaat de planten op in de globale variabele
                plantsData = plants;

                //vul de lijst met planten
                renderPlantList(plantsData);

               
              

                let plantOptions = { valueNames: ['plant-names'] };

                document.addEventListener('DOMContentLoaded', () => {
                    new list('list-view-plants', plantOptions);
                });


            } catch(error){
                console.log('error fetching plants:', error)
            }
        }

        function renderPlantList(plants){
             // selecteert de lijst in html
             const listElement = document.querySelector('#list-view-plants');
             listElement.innerHTML = ''; //lijst eerst leegmaken, vervolgens worden alleen de nieuwe planten toegevoegd

               // zet de planten in de lijst
               plants.forEach((plant) => {
                    const li = document.createElement('li');
                    li.classList.add('plant-names');
                    li.innerHTML = `${plant["Common name"]}`;
                    listElement.appendChild(li);
                    
                });

        }

        //planten filteren op basis van de zoekterm
        function filterPlants(searchTerm) {
            const filteredPlants = plantsData.filter(plant =>{
                const commonName = plant['Common name']; 

                //controleer of CommonName een string is voordat toLowerCase wordt aangeroepen
                if (typeof commonName === 'string'){
                    return commonName.toLowerCase().includes(searchTerm.toLowerCase());
                } else {
                    //als commonName geen string is, retourneer false
                    return false;
                }     
            }); 
            
            //toLowerCase() maakt de functie hoofletterongevoelig
            //includes() checkt of de plantnaam de zoekterm bevat
            renderPlantList(filteredPlants); //update de lijst met gefilterde planten
        }

        //event listener voor zoekveld
        document.getElementById('search-input').addEventListener('input', (event) =>{
            const searchTerm = event.target.value;
            filterPlants(searchTerm);
        });

        document.addEventListener('DOMContentLoaded', () => {
            fetchPlants(); // Zorg ervoor dat de DOM geladen is voordat je dingen probeert te renderen
        });


        const sortButton = document.getElementById('sort-btn');
        const sortOptions = document.getElementById('sort-options');
        const filterButton = document.getElementById('filter-btn');
        const filterOptions = document.getElementById('filter-options');

        const sortPaths = sortButton.querySelectorAll('svg path');
        const filterIcon = filterButton.querySelector('svg path');


        // Toggle voor sorteren
        sortButton.addEventListener('click', function (event) {
            event.stopPropagation();
            sortOptions.classList.toggle('hidden');
            sortButton.classList.toggle('active');
            sortPaths.forEach(path => path.classList.toggle('active')); 

            filterOptions.classList.add('hidden');
            filterButton.classList.remove('active');
            filterIcon.classList.remove('active');
        });

        // Toggle voor filteren
        filterButton.addEventListener('click', function (event) {
            event.stopPropagation();
            filterOptions.classList.toggle('hidden');
            filterButton.classList.toggle('active');
            filterIcon.classList.toggle('active'); 

            sortOptions.classList.add('hidden');
            sortButton.classList.remove('active');
            sortPaths.forEach(path => path.classList.remove('active'));
        });

        // Klik buiten een dropdown om deze te sluiten
        document.addEventListener('click', function (event) {
            if (!sortButton.contains(event.target) && !sortOptions.contains(event.target)) {
                sortOptions.classList.add('hidden');
                sortButton.classList.remove('active');
                sortPaths.forEach(path => path.classList.remove('active'));
            }
            if (!filterButton.contains(event.target) && !filterOptions.contains(event.target)) {
                filterOptions.classList.add('hidden');
                filterButton.classList.remove('active');
                filterIcon.classList.remove('active');
            }
        });

    </script>



    <script src="/script.js" defer></script>
</body>
</html>