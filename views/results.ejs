<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Results</title>
  <link rel="stylesheet" href="/style.css">
  <%- include('partials/header') %>
  <style>
    h1 {
      margin-bottom: 1em;
    }
  </style>
</head>
<body>
  <main id="plantList">
    <h1 class="h1-small">Results</h1>
    <%- include('partials/container') %>

    <ul class="list-view list" id="plant-list">
        <% plants.forEach(plant => { 
          const commonNameRaw = plant['Common name'];
          const commonName = Array.isArray(commonNameRaw) ? commonNameRaw[0] : commonNameRaw;
          const displayName = commonName || 'No name';
        %>
          <li class="plant-item" data-name="<%= displayName %>">
            <span class="plant-names name">
              <%- include('partials/cards', { plant: { ...plant, 'Common name': displayName } }) %>
            </span>
          </li>
        <% }) %>
      </ul>
  </main>

  <footer>
    <%- include('partials/footer') %>
  </footer>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/list.js/2.3.1/list.min.js"></script>
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const filterInputs = document.querySelectorAll('#filter-options input[type="radio"]');
      const urlParams = new URLSearchParams(window.location.search);

      // Zet juiste radio-button automatisch aan op basis van URL
      for (const [key, value] of urlParams.entries()) {
        const input = document.querySelector(`input[name="${key}"][value="${value}"]`);
        if (input) input.checked = true;
      }

      // Automatisch toepassen van filters bij verandering
      filterInputs.forEach(input => {
        input.addEventListener('change', () => {
          const form = document.getElementById('filter-form');
          if (form) form.submit();
        });
      });

      // Zet filter UI open als er filters actief zijn
      const hasFilters =
        urlParams.has("sun") || urlParams.has("water") || urlParams.has("size") || urlParams.has("growth");

      if (hasFilters) {
        const filterOptions = document.getElementById("filter-options");
        const filterBtn = document.getElementById("filter-btn");
        const filterIcon = filterBtn?.querySelector("svg path");

        if (filterOptions && filterBtn) {
          filterOptions.classList.remove("hidden");
          filterBtn.classList.add("active");
          filterIcon?.classList.add("active");
        }
      }

      // Dropdown toggle gedrag
      const sortButton = document.getElementById('sort-btn');
      const sortOptions = document.getElementById('sort-options');
      const filterButton = document.getElementById('filter-btn');
      const filterOptions = document.getElementById('filter-options');

      const sortPaths = sortButton?.querySelectorAll('svg path') || [];
      const filterIcon = filterButton?.querySelector('svg path');

      sortButton?.addEventListener('click', function (event) {
        event.stopPropagation();
        sortOptions.classList.toggle('hidden');
        sortButton.classList.toggle('active');
        sortPaths.forEach(path => path.classList.toggle('active'));

        filterOptions.classList.add('hidden');
        filterButton.classList.remove('active');
        filterIcon?.classList.remove('active');
      });

      filterButton?.addEventListener('click', function (event) {
        event.stopPropagation();
        filterOptions.classList.toggle('hidden');
        filterButton.classList.toggle('active');
        filterIcon?.classList.toggle('active');

        sortOptions.classList.add('hidden');
        sortButton.classList.remove('active');
        sortPaths.forEach(path => path.classList.remove('active'));
      });

      document.addEventListener('click', function (event) {
        if (!sortButton.contains(event.target) && !sortOptions.contains(event.target)) {
          sortOptions.classList.add('hidden');
          sortButton.classList.remove('active');
          sortPaths.forEach(path => path.classList.remove('active'));
        }
        if (!filterButton.contains(event.target) && !filterOptions.contains(event.target)) {
          filterOptions.classList.add('hidden');
          filterButton.classList.remove('active');
          filterIcon?.classList.remove('active');
        }
      });

      // ✅ Zoekfunctionaliteit met List.js
      const listOptions = {
        valueNames: ['name']
      };
      const plantListInstance = new List('plantList', listOptions);

      // ✅ Sorteerfunctionaliteit
      const sortAZ = document.getElementById('A-Z');
      const sortZA = document.getElementById('Z-A');

      function sortPlants(order = 'asc') {
        const items = [...document.querySelectorAll('.plant-item')];

        items.sort((a, b) => {
          const nameA = a.dataset.name.toLowerCase();
          const nameB = b.dataset.name.toLowerCase();
          return order === 'asc' ? nameA.localeCompare(nameB) : nameB.localeCompare(nameA);
        });

        const plantList = document.getElementById('plant-list');
        items.forEach(item => plantList.appendChild(item));
      }

      sortAZ?.addEventListener('change', () => sortPlants('asc'));
      sortZA?.addEventListener('change', () => sortPlants('desc'));
    });
  </script>
</body>
</html>
