<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Results</title>
    <link rel="stylesheet" href="/style.css">
   

    <%- include('partials/header') %>   

    <style>
        h1{

             margin-bottom: 1em;
            }


        #plantList{
            display: flex;
            flex-direction: column;
            align-items: center;

            margin-bottom: 1em;
            /* text-align: center; */

        }


        /* .radio-container{
            display: grid;
            grid-template-columns: 1.66em 1.66em 1fr 1.66em 1.66em;
            grid-auto-flow: column;

            column-gap: 1em;
            margin: 0 1em 1em 1em;

            position: relative;
            width: 91vw;
            max-width: 59.1em;
        } */


        /* input[type="radio"]{
            display: none;
        } */


        /* ul.list-view{
            display: grid; 
            grid-gap: var(--white-space);
            margin: 0 1em;
        }


        ul.list-view li{
            list-style-type: none;
        } */


        /* grid-view template */
        /* ul.grid-view{
            display: grid;
            width: min(92%, 60em);
            grid-gap: var(--white-space);
            margin: 0 1em;
            grid-template-columns: calc((100% - var(--white-space)) / 2) 
                                calc((100% - var(--white-space)) / 2);


        }


        ul.grid-view li{
            grid-template-columns: 1fr;
            list-style-type: none;
        }


        ul.list-view article div {
            height: 3em;
        } */

        /* Grotere hoogte voor grid-view */
        /* ul.grid-view article div {
            height: 5em;
        } */

        /* styling radio buttons */
        /* .custom-radio-list{
            width: 1.66em;
            height: 1.66em;
            border-radius: .2em;
            padding: 0;

            grid-column: 5 / 6;

            background: var(--color-background-inputfield);
            border: .07em solid var(--color-lines);

        }


        .custom-radio-list:has(input:checked){
            background: var(--color-logo);
        }


        .custom-radio-grid{
            display: grid;
            grid-template-columns: 1fr 1fr;

            grid-column: 4 / 5;

            width: 1.66em;
            height: 1.36em;
            gap: .2em;
            padding: 0;
        }

        .custom-radio-grid span:first-of-type{
            grid-row: 1 / 2;
            grid-column: 1 / 2;
        }

        .custom-radio-grid span:nth-of-type(2){
            grid-row: 1 / 2;
            grid-column: 2 / 3;
        }

        .custom-radio-grid span:nth-of-type(3){
            grid-row: 2 / 3;
            grid-column: 1 / 2;
        }

        .custom-radio-grid span:nth-of-type(4){
            grid-row: 2 / 3;
            grid-column: 2 / 3;
        }


        .custom-radio-grid span{
            height: .65em;

            border-radius: .1em;
            background: var(--color-background-inputfield);
            border: .07em solid var(--color-lines);
        }


        .custom-radio-grid:has(input:checked) span{
            background: var(--color-logo);
        } */
    </style>
</head>
<body>
  <main id="plantList">
    <h1 class="h1-small">Results</h1>
    <%- include('partials/container') %>

    <ul class="list-view list" id="plant-list">
      <% plants.forEach(plant => { 
        const commonNameRaw = plant['Common name'];
        const commonName = Array.isArray(commonNameRaw) ? commonNameRaw[0] : commonNameRaw;
        const displayName = commonName || 'No name';
      %>
        <li class="plant-item" data-name="<%= displayName %>">
          <span class="plant-names name">
            <%- include('partials/cards', { plant: { ...plant, 'Common name': displayName } }) %>
          </span>
        </li>
      <% }) %>
    </ul>
  </main>

  <footer>
    <%- include('partials/footer') %>
  </footer>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/list.js/2.3.1/list.min.js"></script>
  <script>
    //check if fav
    document.addEventListener("DOMContentLoaded", function() {
       const favButton = document.querySelectorAll('.favorite-btn')        
        favButton.forEach(button => {
            const plantId = button.dataset.plantId
            checkIfFavorite(plantId, button);
        })
    })

    async function checkIfFavorite(plantId, button) {
        try {
            const response = await fetch(`/is-favorite/${plantId}`);
            const result = await response.json();

            if(result.isFavorite) {
                console.log("is favoriet!")
                button.querySelector('.cls-2').classList.add('clicked')
            }
        } catch (error){
                    console.error('Error checking favorite status:', error);
        }
    }

    // -----------

    document.addEventListener("DOMContentLoaded", function () {
      const filterInputs = document.querySelectorAll('#filter-options input[type="radio"]');
      const urlParams = new URLSearchParams(window.location.search);

      for (const [key, value] of urlParams.entries()) {
        const input = document.querySelector(`input[name="${key}"][value="${value}"]`);
        if (input) input.checked = true;
      }

      filterInputs.forEach(input => {
        input.addEventListener('change', () => {
          const form = document.getElementById('filter-form');
          if (form) form.submit();
        });
      });

      const hasFilters =
        urlParams.has("sun") || urlParams.has("water") || urlParams.has("size") || urlParams.has("growth");

      if (hasFilters) {
        const filterOptions = document.getElementById("filter-options");
        const filterBtn = document.getElementById("filter-btn");
        const filterIcon = filterBtn?.querySelector("svg path");

        if (filterOptions && filterBtn) {
          filterOptions.classList.remove("hidden");
          filterBtn.classList.add("active");
          filterIcon?.classList.add("active");
        }
      }

      const sortButton = document.getElementById('sort-btn');
      const sortOptions = document.getElementById('sort-options');
      const filterButton = document.getElementById('filter-btn');
      const filterOptions = document.getElementById('filter-options');

      const sortPaths = sortButton?.querySelectorAll('svg path') || [];
      const filterIcon = filterButton?.querySelector('svg path');

      sortButton?.addEventListener('click', function (event) {
        event.stopPropagation();
        sortOptions.classList.toggle('hidden');
        sortButton.classList.toggle('active');
        sortPaths.forEach(path => path.classList.toggle('active'));

        filterOptions.classList.add('hidden');
        filterButton.classList.remove('active');
        filterIcon?.classList.remove('active');
      });

      filterButton?.addEventListener('click', function (event) {
        event.stopPropagation();
        filterOptions.classList.toggle('hidden');
        filterButton.classList.toggle('active');
        filterIcon?.classList.toggle('active');

        sortOptions.classList.add('hidden');
        sortButton.classList.remove('active');
        sortPaths.forEach(path => path.classList.remove('active'));
      });

      document.addEventListener('click', function (event) {
        if (!sortButton.contains(event.target) && !sortOptions.contains(event.target)) {
          sortOptions.classList.add('hidden');
          sortButton.classList.remove('active');
          sortPaths.forEach(path => path.classList.remove('active'));
        }
        if (!filterButton.contains(event.target) && !filterOptions.contains(event.target)) {
          filterOptions.classList.add('hidden');
          filterButton.classList.remove('active');
          filterIcon?.classList.remove('active');
        }
      });

      // List.js zoekfunctionaliteit
      const listOptions = {
        valueNames: ['name']
      };
      const plantListInstance = new List('plantList', listOptions);

      // Sorteerfunctionaliteit
      const sortAZ = document.getElementById('A-Z');
      const sortZA = document.getElementById('Z-A');

      function sortPlants(order = 'asc') {
        const items = [...document.querySelectorAll('.plant-item')];

        items.sort((a, b) => {
          const nameA = a.dataset.name.toLowerCase();
          const nameB = b.dataset.name.toLowerCase();
          return order === 'asc' ? nameA.localeCompare(nameB) : nameB.localeCompare(nameA);
        });

        const plantList = document.getElementById('plant-list');
        items.forEach(item => plantList.appendChild(item));
      }

      sortAZ?.addEventListener('change', () => sortPlants('asc'));
      sortZA?.addEventListener('change', () => sortPlants('desc'));
    });


       //add to fav
       async function addToFavorites(event, plantId) {
        event.preventDefault();
        event.stopPropagation(); // zorgt ervoor dat je niet naar detailpagina gaat
            try {
                const response = await fetch('/add-favorite', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json'},
                    body: JSON.stringify({plantId})
                });

                const result = await response.json();
                if (result.success) {
                    alert(result.message);
                } else {
                    alert(result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Something went wrong!');
            }
        }

        document.querySelectorAll('.favorite-btn').forEach(button => {
            button.addEventListener('click', function (event){
                event.preventDefault(); // Voorkom dat de `<a>` link wordt gevolgd
                console.log("moet groen worden")
                this.querySelector('svg .cls-2').classList.toggle('clicked');
            });
        });
  </script>
</body>
</html>
